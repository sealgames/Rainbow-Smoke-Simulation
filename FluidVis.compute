// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

struct FluidBox
{
    float density;
    float xVelo;
    float yVelo;
};

RWStructuredBuffer<FluidBox> fluidData;

int width;
int height;


float4 hsv_to_rgb(float3 HSV)
{
    // return float4(1,0,1,1);
    float3 RGB = HSV.z;
        
    float var_h = HSV.x * 6;
    float var_i = floor(var_h);   // Or ... var_i = floor( var_h )
    float var_1 = HSV.z * (1.0 - HSV.y);
    float var_2 = HSV.z * (1.0 - HSV.y * (var_h-var_i));
    float var_3 = HSV.z * (1.0 - HSV.y * (1-(var_h-var_i)));
    if      (var_i == 0) { RGB = float3(HSV.z, var_3, var_1); }
    else if (var_i == 1) { RGB = float3(var_2, HSV.z, var_1); }
    else if (var_i == 2) { RGB = float3(var_1, HSV.z, var_3); }
    else if (var_i == 3) { RGB = float3(var_1, var_2, HSV.z); }
    else if (var_i == 4) { RGB = float3(var_3, var_1, HSV.z); }
    else                 { RGB = float3(HSV.z, var_1, var_2); }
        
    return float4(RGB.r, RGB.g, RGB.b, 1);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    FluidBox fluid_box = fluidData[id.y * width + id.x];
    float density = fluid_box.density;

    if (abs(fluid_box.xVelo) < 0.01)
    {
        fluid_box.xVelo = 0.01;
    }
    
    float angle = (atan2(fluid_box.yVelo, fluid_box.xVelo) + 3.141) / (2 * 3.141);
    
    float4 newColor = float4(hsv_to_rgb(float3(angle, density, density)).xyz, density);
    Result[id.xy] = newColor;
}
